[% USE Koha %]
[% USE raw %]
[% PROCESS 'i18n.inc' %]
[% SET footerjs = 1 %]
[% INCLUDE 'doc-head-open.inc' %]
<title>Crontab: Administer &rsaquo; Plugins &rsaquo; Administration &rsaquo; Koha</title>
[% INCLUDE 'doc-head-close.inc' %]
<style>
.job-enabled {
    color: #28a745;
}
.job-disabled {
    color: #dc3545;
}
.schedule-preview {
    font-family: 'Courier New', monospace;
    background-color: #f8f9fa;
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-size: 0.875rem;
}
.env-var {
    display: inline-block;
    background-color: #e9ecef;
    padding: 0.125rem 0.375rem;
    margin: 0.125rem;
    border-radius: 0.25rem;
    font-size: 0.75rem;
}
.btn-xs {
    padding: 0.125rem 0.375rem;
    font-size: 0.75rem;
    border-radius: 0.25rem;
}
</style>
</head>

<body id="crontab_plugin_admin" class="plugin">
    [% WRAPPER 'header.inc' %]
        [% INCLUDE 'prefs-admin-search.inc' %]
    [% END %]

    [% WRAPPER 'sub-header.inc' %]
        [% WRAPPER breadcrumbs %]
            [% WRAPPER breadcrumb_item %]
                <a href="/cgi-bin/koha/admin/admin-home.pl">Administration</a>
            [% END %]
            [% WRAPPER breadcrumb_item %]
                <a href="/cgi-bin/koha/plugins/plugins-home.pl">Plugins</a>
            [% END %]
            [% WRAPPER breadcrumb_item bc_active= 1 %]
                <span>Crontab: Administer</span>
            [% END %]
        [% END #/ WRAPPER breadcrumbs %]
    [% END #/ WRAPPER sub-header.inc %]

    <div class="main container-fluid">
        <div class="row">
            <div class="col-md-10 order-md-2 order-sm-1">
                <main>
                    <div id="message"></div>

                    <h1>Crontab: Administer</h1>

                    <div id="toolbar" class="btn-toolbar">
                        <button type="button" data-bs-toggle="modal" data-bs-target="#jobModal" class="btn btn-primary" id="newjob">
                            <i class="fa fa-plus"></i> New Job
                        </button>
                        <button type="button" id="backup_now" class="btn btn-default">
                            <i class="fa fa-archive"></i> Backup
                        </button>
                        <button type="button" id="refresh_jobs" class="btn btn-default">
                            <i class="fa fa-refresh"></i> Refresh
                        </button>
                    </div>

                    <!-- Global Environment Variables Section -->
                    <div class="page-section">
                        <div class="card">
                            <div class="card-header" id="env-heading">
                                <h5 class="mb-0">
                                    <button class="btn btn-link collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#env-collapse" aria-expanded="false" aria-controls="env-collapse">
                                        <i class="fa fa-list"></i> Global Environment Variables
                                        <small class="text-muted">(click to expand)</small>
                                    </button>
                                </h5>
                            </div>
                            <div id="env-collapse" class="collapse" aria-labelledby="env-heading">
                                <div class="card-body">
                                    <p class="text-muted">Global environment variables defined at the crontab level. These are available to all cron jobs.</p>
                                    <table class="table table-sm table-striped" id="env_vars_table">
                                        <thead>
                                            <tr>
                                                <th>Variable</th>
                                                <th>Value</th>
                                            </tr>
                                        </thead>
                                        <tbody id="env_vars_tbody">
                                            <!-- Environment variables will be loaded dynamically -->
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Tabs for different views -->
                    <ul class="nav nav-tabs" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="managed-tab" data-bs-toggle="tab" data-bs-target="#managed-jobs" type="button" role="tab">
                                <i class="fa fa-cog"></i> Managed Jobs
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="system-tab" data-bs-toggle="tab" data-bs-target="#system-jobs" type="button" role="tab">
                                <i class="fa fa-server"></i> System Jobs
                            </button>
                        </li>
                    </ul>

                    <div class="tab-content">
                        <!-- Managed Jobs Tab -->
                        <div class="tab-pane fade show active" id="managed-jobs" role="tabpanel">
                            <div class="page-section">
                                <p class="text-muted">Jobs managed by this plugin. You can create, edit, enable/disable, and delete these jobs.</p>
                                <div id="jobs-loading" class="text-center my-4" style="display: none;">
                                    <i class="fa fa-spinner fa-pulse fa-3x fa-fw text-muted"></i>
                                    <p class="text-muted mt-2">Loading managed jobs...</p>
                                </div>
                                <table class="table table-striped" id="jobs_table">
                                    <thead>
                                        <tr>
                                            <th>Status</th>
                                            <th>Schedule</th>
                                            <th>Command</th>
                                            <th>Description</th>
                                            <th>Environment</th>
                                            <th>Updated</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody id="jobs_tbody">
                                        <!-- Jobs will be loaded dynamically -->
                                    </tbody>
                                </table>
                            </div>
                        </div>

                        <!-- System Jobs Tab -->
                        <div class="tab-pane fade" id="system-jobs" role="tabpanel">
                            <div class="page-section">
                                <div class="alert alert-info">
                                    <i class="fa fa-info-circle"></i> These jobs are managed outside this plugin (e.g., by Ansible, manually, or other tools).
                                    They are displayed as <strong>read-only</strong> for your reference to avoid scheduling conflicts.
                                </div>
                                <div id="system-jobs-loading" class="text-center my-4" style="display: none;">
                                    <i class="fa fa-spinner fa-pulse fa-3x fa-fw text-muted"></i>
                                    <p class="text-muted mt-2">Loading system jobs...</p>
                                </div>
                                <table class="table table-striped" id="system_jobs_table">
                                    <thead>
                                        <tr>
                                            <th>Status</th>
                                            <th>Schedule</th>
                                            <th>Command</th>
                                            <th>Comments</th>
                                        </tr>
                                    </thead>
                                    <tbody id="system_jobs_tbody">
                                        <!-- System jobs will be loaded dynamically -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </main>
            </div> <!-- /.col-md-10.order-md-2 -->
            <div class="col-md-2 order-sm-2 order-md-1">
                <aside>
                    [% INCLUDE 'admin-menu.inc' %]
                </aside>
            </div> <!-- /.col-md-2.order-md-1 -->
        </div>
    </div>

    <!-- Add/Edit Job Modal -->
    <div class="modal fade" id="jobModal" tabindex="-1" role="dialog" aria-labelledby="job-modal-label">
      <form id="jobForm">
            <div class="modal-dialog modal-lg" role="document">
          <div class="modal-content">
            <div class="modal-header">
                        <h1 class="modal-title" id="job-modal-label">New Job</h1>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label for="job-name" class="form-label">Name *</label>
                                    <input type="text" class="form-control" id="job-name" required placeholder="e.g., Daily Database Backup">
                                </div>
                            </div>
        
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label for="job-enabled" class="form-label">Status</label>
                                    <select class="form-control" id="job-enabled">
                                        <option value="1">Enabled</option>
                                        <option value="0">Disabled</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <div class="form-group mb-3">
                            <label for="job-description" class="form-label">Description</label>
                            <textarea class="form-control" id="job-description" rows="2" placeholder="Description of what this job does"></textarea>
                        </div>

                        <div class="form-group mb-3">
                            <label for="job-schedule" class="form-label">Schedule *</label>
                            <div class="input-group">
                                <input type="text" class="form-control" id="job-schedule" required placeholder="0 2 * * *">
                                <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                    Presets
                                </button>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item schedule-preset" data-schedule="*/5 * * * *">Every 5 minutes</a></li>
                                    <li><a class="dropdown-item schedule-preset" data-schedule="*/30 * * * *">Every 30 minutes</a></li>
                                    <li><a class="dropdown-item schedule-preset" data-schedule="0 * * * *">Every hour</a></li>
                                    <li><a class="dropdown-item schedule-preset" data-schedule="0 */2 * * *">Every 2 hours</a></li>
                                    <li><a class="dropdown-item schedule-preset" data-schedule="0 2 * * *">Daily at 2:00 AM</a></li>
                                    <li><a class="dropdown-item schedule-preset" data-schedule="0 0 * * 0">Weekly (Sunday)</a></li>
                                    <li><a class="dropdown-item schedule-preset" data-schedule="0 0 1 * *">Monthly (1st day)</a></li>
                                </ul>
                  </div>
                            <small class="form-text text-muted">
                                <a href="https://crontab.guru" target="_blank">Need help with cron syntax?</a>
                            </small>
                </div>

                        <div class="form-group mb-3">
                            <label for="job-command" class="form-label">Command *</label>
                            <input type="text" class="form-control" id="job-command" required placeholder="/usr/local/bin/my-script.sh">
                            <small class="form-text text-muted">Full path to the command or script to execute</small>
                </div>

                        <div class="form-group mb-3">
                            <label class="form-label">Environment Variables</label>
                            <div id="environment-container">
                                <!-- Environment variables will be added here -->
                            </div>
                            <button type="button" class="btn btn-sm btn-outline-secondary" id="add-env-var">
                                <i class="fa fa-plus"></i> Add Variable
                            </button>
                        </div>
            </div>
            <div class="modal-footer">
                        <input type="hidden" id="job-id">
                        <button type="submit" class="btn btn-primary">
                            <i class="fa fa-check"></i> Save Job
                        </button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                            <i class="fa fa-times"></i> Cancel
                        </button>
            </div>
          </div>
        </div>
      </form>
    </div>

    <!-- Delete Job Modal -->
    <div class="modal fade" id="deleteModal" tabindex="-1" role="dialog" aria-labelledby="delete-modal-label">
      <form id="deleteForm">
        <div class="modal-dialog" role="document">
          <div class="modal-content">
            <div class="modal-header">
                        <h1 class="modal-title" id="delete-modal-label">Delete Job</h1>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                        <p>Are you sure you want to delete the job "<span id="delete-job-name"></span>"?</p>
                        <p class="text-muted">This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                        <input type="hidden" id="delete-job-id">
                        <button type="submit" class="btn btn-danger">
                            <i class="fa fa-trash"></i> Delete Job
                        </button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                            <i class="fa fa-times"></i> Cancel
                        </button>
            </div>
          </div>
        </div>
      </form>
    </div>

[% MACRO jsinclude BLOCK %]
    [% INCLUDE 'datatables.inc' %]
    <script>
        $(document).ready(function() {
            $('#navmenulist a[href$="/cgi-bin/koha/plugins/plugins-home.pl"]').addClass("current");
        });
    </script>
    <script>
        let jobsTable;
        let systemJobsTable;

        $(document).ready(function() {
            // Initialize DataTables
            jobsTable = $('#jobs_table').DataTable({
                "paging": true,
                "lengthChange": true,
                "searching": true,
                "ordering": true,
                "info": true,
                "autoWidth": false,
                "columnDefs": [
                    { "orderable": false, "targets": -1 } // Disable sorting on Actions column
                ]
            });

            systemJobsTable = $('#system_jobs_table').DataTable({
                "paging": true,
                "lengthChange": true,
                "searching": true,
                "ordering": true,
                "info": true,
                "autoWidth": false
            });

            // Load all data on page load
            loadJobs();
            loadAllCrontabEntries();
            loadEnvironmentVariables();

            // Event handlers
            $('#newjob').on('click', function() {
                openJobModal();
            });

            $('#backup_now').on('click', function() {
                createBackup();
            });

            $('#refresh_jobs').on('click', function() {
                loadJobs();
                loadAllCrontabEntries();
                loadEnvironmentVariables();
            });

            // Schedule presets
            $('.schedule-preset').on('click', function(e) {
                e.preventDefault();
                $('#job-schedule').val($(this).data('schedule'));
            });

            // Add environment variable
            $('#add-env-var').on('click', function() {
                addEnvironmentVariable();
            });

            // Form submissions
            $('#jobForm').on('submit', function(e) {
                e.preventDefault();
                saveJob();
            });

            $('#deleteForm').on('submit', function(e) {
                e.preventDefault();
                deleteJob();
            });
        });

        function loadJobs() {
            $('#jobs-loading').show();
            $('#jobs_table').hide();

            $.ajax({
                url: '/api/v1/contrib/crontab/jobs',
                method: 'GET',
                success: function(data) {
                    populateJobsTable(data.jobs);
                },
                error: function(xhr, status, error) {
                    showMessage('Failed to load jobs: ' + error, 'danger');
                    $('#jobs-loading').hide();
                    $('#jobs_table').show();
                }
            });
        }

        function populateJobsTable(jobs) {
            jobsTable.clear();

            jobs.forEach(function(job) {
                let statusBadge = job.enabled
                    ? '<span class="badge bg-success">Enabled</span>'
                    : '<span class="badge bg-secondary">Disabled</span>';

                let envVars = '';
                if (job.environment && Object.keys(job.environment).length > 0) {
                    Object.keys(job.environment).forEach(function(key) {
                        envVars += '<span class="env-var">' + key + '</span>';
                    });
                } else {
                    envVars = '<span class="text-muted">None</span>';
                }

                // Use name, description, or command snippet for identification
                let jobIdentifier = job.name || job.description || job.command.substring(0, 50) + (job.command.length > 50 ? '...' : '');

                // Build description cell with name at top if present
                let descriptionHtml = '';
                if (job.name) {
                    descriptionHtml += '<strong>' + job.name + '</strong><br>';
                }
                if (job.description) {
                    descriptionHtml += job.description;
                } else if (!job.name) {
                    descriptionHtml = '<span class="text-muted">No description</span>';
                }

                let actions = `
                    <button class="btn btn-xs btn-primary edit-job" data-job-id="${job.id}">
                        <i class="fa fa-edit"></i> Edit
                    </button>
                    <button class="btn btn-xs ${job.enabled ? 'btn-warning disable-job' : 'btn-success enable-job'}" data-job-id="${job.id}">
                        <i class="fa ${job.enabled ? 'fa-pause' : 'fa-play'}"></i> ${job.enabled ? 'Disable' : 'Enable'}
                    </button>
                    <button class="btn btn-xs btn-danger delete-job" data-job-id="${job.id}" data-job-desc="${jobIdentifier}">
                        <i class="fa fa-trash"></i> Delete
                    </button>
                `;

                jobsTable.row.add([
                    statusBadge,
                    '<code class="schedule-preview">' + job.schedule + '</code>',
                    '<code>' + job.command + '</code>',
                    descriptionHtml,
                    envVars,
                    new Date(job.updated_at).toLocaleDateString(),
                    actions
                ]);
            });

            jobsTable.draw();

            // Hide spinner and show table
            $('#jobs-loading').hide();
            $('#jobs_table').show();

            // Bind action handlers
            bindActionHandlers();
        }

        function bindActionHandlers() {
            $('.edit-job').off('click').on('click', function() {
                let jobId = $(this).data('job-id');
                openJobModal(jobId);
                    });

            $('.enable-job, .disable-job').off('click').on('click', function() {
                let jobId = $(this).data('job-id');
                let enable = $(this).hasClass('enable-job');
                toggleJobStatus(jobId, enable);
            });

            $('.delete-job').off('click').on('click', function() {
                let jobId = $(this).data('job-id');
                let jobDesc = $(this).data('job-desc');
                openDeleteModal(jobId, jobDesc);
            });
        }

        function openJobModal(jobId = null) {
            if (jobId) {
                // Edit existing job
                $('#job-modal-label').text('Edit Job');
                $('#job-id').val(jobId);
                loadJobForEdit(jobId);
            } else {
                // New job
                $('#job-modal-label').text('New Job');
                $('#job-id').val('');
                clearJobForm();
            }
            $('#jobModal').modal('show');
        }

        function loadJobForEdit(jobId) {
            $.ajax({
                url: '/api/v1/contrib/crontab/jobs/' + jobId,
                method: 'GET',
                success: function(job) {
                    $('#job-name').val(job.name);
                    $('#job-description').val(job.description);
                    $('#job-schedule').val(job.schedule);
                    $('#job-command').val(job.command);
                    $('#job-enabled').val(job.enabled ? '1' : '0');

                    // Clear and populate environment variables
                    $('#environment-container').empty();
                    if (job.environment && Object.keys(job.environment).length > 0) {
                        Object.keys(job.environment).forEach(function(key) {
                            addEnvironmentVariable(key, job.environment[key]);
                        });
                    }
                },
                error: function(xhr, status, error) {
                    showMessage('Failed to load job: ' + error, 'danger');
                    }
                });
        }

        function clearJobForm() {
            $('#jobForm')[0].reset();
            $('#environment-container').empty();
        }

        function addEnvironmentVariable(key = '', value = '') {
            let envHtml = `
                <div class="row mb-2 env-var-row">
                    <div class="col-md-4">
                        <input type="text" class="form-control env-key" placeholder="Variable name" value="${key}">
                    </div>
                    <div class="col-md-6">
                        <input type="text" class="form-control env-value" placeholder="Variable value" value="${value}">
                    </div>
                    <div class="col-md-2">
                        <button type="button" class="btn btn-sm btn-outline-danger remove-env-var">
                            <i class="fa fa-times"></i>
                        </button>
                    </div>
                </div>
            `;
            $('#environment-container').append(envHtml);

            // Bind remove handler
            $('.remove-env-var').off('click').on('click', function() {
                $(this).closest('.env-var-row').remove();
            });
        }

        function saveJob() {
            let jobData = {
                name: $('#job-name').val(),
                description: $('#job-description').val(),
                schedule: $('#job-schedule').val(),
                command: $('#job-command').val(),
                enabled: $('#job-enabled').val() === '1'
            };

            // Collect environment variables
            let environment = {};
            $('.env-var-row').each(function() {
                let key = $(this).find('.env-key').val().trim();
                let value = $(this).find('.env-value').val().trim();
                if (key && value) {
                    environment[key] = value;
                }
            });
            jobData.environment = environment;

            let jobId = $('#job-id').val();
            let url = '/api/v1/contrib/crontab/jobs';
            let method = 'POST';

            if (jobId) {
                url += '/' + jobId;
                method = 'PUT';
            }

            $.ajax({
                    url: url,
                method: method,
                data: JSON.stringify(jobData),
                contentType: 'application/json',
                success: function(data) {
                    showMessage(jobId ? 'Job updated successfully' : 'Job created successfully', 'success');
                    $('#jobModal').modal('hide');
                    loadJobs();
                },
                error: function(xhr, status, error) {
                    let message = 'Failed to save job';
                    if (xhr.responseJSON && xhr.responseJSON.error) {
                        message += ': ' + xhr.responseJSON.error;
                    }
                    showMessage(message, 'danger');
                }
            });
        }

        function toggleJobStatus(jobId, enable) {
            let action = enable ? 'enable' : 'disable';
            $.ajax({
                url: '/api/v1/contrib/crontab/jobs/' + jobId + '/' + action,
                method: 'POST',
                success: function(data) {
                    showMessage('Job ' + (enable ? 'enabled' : 'disabled') + ' successfully', 'success');
                    loadJobs();
                },
                error: function(xhr, status, error) {
                    showMessage('Failed to ' + action + ' job: ' + error, 'danger');
                }
            });
        }

        function openDeleteModal(jobId, jobDesc) {
            $('#delete-job-id').val(jobId);
            $('#delete-job-name').text(jobDesc);
            $('#deleteModal').modal('show');
        }

        function deleteJob() {
            let jobId = $('#delete-job-id').val();
            $.ajax({
                url: '/api/v1/contrib/crontab/jobs/' + jobId,
                method: 'DELETE',
                success: function(data) {
                    showMessage('Job deleted successfully', 'success');
                $('#deleteModal').modal('hide');
                    loadJobs();
                },
                error: function(xhr, status, error) {
                    showMessage('Failed to delete job: ' + error, 'danger');
                }
            });
        }

        function loadAllCrontabEntries() {
            $('#system-jobs-loading').show();
            $('#system_jobs_table').hide();

            $.ajax({
                url: '/api/v1/contrib/crontab/crontab/all',
                method: 'GET',
                success: function(data) {
                    populateSystemJobsTable(data.entries);
                },
                error: function(xhr, status, error) {
                    showMessage('Failed to load system jobs: ' + error, 'danger');
                    $('#system-jobs-loading').hide();
                    $('#system_jobs_table').show();
                }
            });
        }

        function populateSystemJobsTable(entries) {
            systemJobsTable.clear();

            // Filter out managed jobs - only show system jobs
            let systemJobs = entries.filter(entry => !entry.managed);

            if (systemJobs.length === 0) {
                systemJobsTable.row.add([
                    '<span class="text-muted">-</span>',
                    '<span class="text-muted">-</span>',
                    '<span class="text-muted">No system jobs found</span>',
                    '<span class="text-muted">-</span>'
                ]);
            } else {
                systemJobs.forEach(function(entry) {
                    let statusBadge = entry.enabled
                        ? '<span class="badge bg-success">Active</span>'
                        : '<span class="badge bg-secondary">Commented</span>';

                    let comments = '';
                    if (entry.comments && entry.comments.length > 0) {
                        comments = entry.comments.map(c => '<div class="text-muted small">' + c + '</div>').join('');
                    } else {
                        comments = '<span class="text-muted">No comments</span>';
                    }

                    systemJobsTable.row.add([
                        statusBadge,
                        '<code class="schedule-preview">' + entry.schedule + '</code>',
                        '<code>' + entry.command + '</code>',
                        comments
                    ]);
                });
            }

            systemJobsTable.draw();

            // Hide spinner and show table
            $('#system-jobs-loading').hide();
            $('#system_jobs_table').show();
        }

        function loadEnvironmentVariables() {
            $.ajax({
                url: '/api/v1/contrib/crontab/crontab/environment',
                method: 'GET',
                success: function(data) {
                    populateEnvironmentTable(data.environment);
                },
                error: function(xhr, status, error) {
                    showMessage('Failed to load environment variables: ' + error, 'danger');
                }
            });
        }

        function populateEnvironmentTable(environment) {
            let tbody = $('#env_vars_tbody');
            tbody.empty();

            if (!environment || Object.keys(environment).length === 0) {
                tbody.append('<tr><td colspan="2" class="text-muted text-center">No global environment variables defined</td></tr>');
            } else {
                let count = 0;
                Object.keys(environment).sort().forEach(function(key) {
                    tbody.append(
                        '<tr>' +
                        '<td><strong>' + key + '</strong></td>' +
                        '<td><code>' + environment[key] + '</code></td>' +
                        '</tr>'
                    );
                    count++;
                });

                // Update the collapse button to show count
                $('#env-heading button').html(
                    '<i class="fa fa-list"></i> Global Environment Variables ' +
                    '<span class="badge bg-info">' + count + '</span> ' +
                    '<small class="text-muted">(click to expand)</small>'
                );
            }
        }

        function createBackup() {
            $.ajax({
                url: '/api/v1/contrib/crontab/backup',
                method: 'POST',
                success: function(data) {
                    showMessage('Backup created: ' + data.filename, 'success');
                },
                error: function(xhr, status, error) {
                    showMessage('Failed to create backup: ' + error, 'danger');
                }
            });
        }

        function showMessage(message, type) {
            let alertClass = 'alert-' + type;
            let messageHtml = '<div id="message" class="alert ' + alertClass + ' alert-dismissible fade show">' +
                              message +
                              '<button type="button" class="btn-close" data-bs-dismiss="alert"></button>' +
                              '</div>';
            $('#message').replaceWith(messageHtml);

            // Auto-hide success messages
            if (type === 'success') {
                setTimeout(function() {
                    $('#message').fadeOut();
                }, 3000);
            }
        }
    </script>
[% END %]

[% INCLUDE 'intranet-bottom.inc' %]
